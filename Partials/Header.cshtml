@using Microsoft.AspNetCore.Authentication.Cookies
@using Microsoft.AspNetCore.Http
@using System.Security.Claims;
@inject IHttpContextAccessor HttpContextAccessor

@{
  var isAuthenticated = HttpContextAccessor.HttpContext.User.Identity.IsAuthenticated;
  var userName = isAuthenticated ? HttpContextAccessor.HttpContext.User.Identity.Name : "";
}
<!doctype html>
<html lang="en">

<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1.0" />
  <link href="https://cdnjs.cloudflare.com/ajax/libs/tailwindcss/2.2.19/tailwind.min.css" rel="stylesheet" />
  <title>DREAM BRIDGE</title>
  <style>
    /* Cố định phần header */
    .fixed-header {
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      z-index: 50;
    }



    /* Điều chỉnh chiều cao của header */
    .header-hotline,
    .header-menu {
      padding: 0.5rem 1rem;
      /* Giảm padding */
    }

    /* Đảm bảo body có đủ không gian khi header cố định */
    body {
      padding-top: 200px;
      /* Điều chỉnh cho phù hợp với chiều cao của header */
    }

    /* CSS cho menu dọc */
    #small-menu ul {
      padding: 0;
      margin: 0;
    }

    #small-menu li {
      margin: 5px 0;
    }

    #small-menu a {
      display: block;
      padding: 10px;
      border-radius: 5px;
      transition: background-color 0.2s;
    }

    #small-menu a:hover {
      background-color: #f3f4f6;
      /* Màu nền khi hover */
    }

    /* Ẩn các danh sách con mặc định */
    #small-menu ul ul {
      display: none;
      /* Ẩn các danh sách con */
    }

    /* Hiện các danh sách con khi ở chế độ hiện */
    #small-menu li:hover>ul {
      display: block;
      /* Hiện các danh sách con */
    }
  </style>
</head>

<body>
  <!-- Phần Hotline và Menu sẽ được cố định -->
  <div class="fixed-header">

    <!-- Phần Logo và Menu -->
    <div class="header-menu bg-white">
      <div class="container mx-auto flex items-center justify-between">
        <!-- Logo -->
        <div class="logo">
          <img class="w-28" src="~/Images/Vanguard.png" alt="Logo" />
        </div>

        <!-- Nút Hamburger -->
        <button id="menu-toggle" class="focus:outline-none lg:hidden">
          <svg xmlns="http://www.w3.org/2000/svg" class="h-6 w-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 6h16M4 12h16m-7 6h7" />
          </svg>
        </button>

        <!-- Menu -->
        <div class="menu hidden lg:flex">
          <ul class="flex gap-5 text-lg font-medium">
            <li><a class="transition hover:text-blue-500" href="/home">TRANG CHỦ</a></li>
            <li><a class="transition hover:text-blue-500" href="/vechungtoi">VỀ CHÚNG TÔI</a></li>
            <div class="group relative">
              <a href="/duhoc" class="text-lg text-black transition hover:text-blue-500" id="duhoc-link">DU HỌC</a>

              <!-- Bảng danh sách du học sẽ hiển thị khi di chuột -->
              <div class="absolute z-1 hidden bg-gray-100 p-3 group-hover:block"
                style="left:-45px; top:40px; width: 200px;" id="duhoc-list">
                <table class="w-full table-auto">
                  <tbody>
                    <tr class="flex flex-col">
                      <td class="cursor-pointer border-b border-gray-400 p-2 text-left text-lg hover:bg-gray-300">
                        <a href="/my">Du học Mỹ</a>
                      </td>
                      <td class="cursor-pointer border-b border-gray-400 p-2 text-left text-lg hover:bg-gray-300">
                        <a href="/uc">Du học Úc</a>
                      </td>
                      <td class="cursor-pointer border-b border-gray-400 p-2 text-left text-lg hover:bg-gray-300">
                        <a href="/thuysy">Du học Thụy Sĩ</a>
                      </td>
                      <td class="cursor-pointer border-b border-gray-400 p-2 text-left text-lg hover:bg-gray-300">
                        <a href="/singapore">Du học Singapore</a>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
            <div class="group relative">
              <a href="/dichvu" class="text-lg text-black transition hover:text-blue-500" id="tuvan-link">DỊCH VỤ</a>
              <!-- Bảng danh sách dịch vụ sẽ hiển thị khi di chuột -->
              <div class="absolute z-1 hidden bg-gray-100 p-3 group-hover:block"
                style="left:-55px; top:40px; width: 250px;" id="tuvan-list">
                <table class="w-full table-auto">
                  <tbody>
                    <tr class="flex flex-col">
                      <td class="cursor-pointer border-b border-gray-400 p-2 text-left text-lg hover:bg-gray-300">
                        <a href="/visamy">Dịch vụ visa Mỹ</a>
                      </td>
                      <td class="cursor-pointer border-b border-gray-400 p-2 text-left text-lg hover:bg-gray-300">
                        <a href="/visauc">Dịch vụ visa Úc</a>
                      </td>
                      <td class="cursor-pointer border-b border-gray-400 p-2 text-left text-lg hover:bg-gray-300">
                        <a href="/visasingapore">Dịch vụ visa Singapore</a>
                      </td>
                      <td class="cursor-pointer border-b border-gray-400 p-2 text-left text-lg hover:bg-gray-300">
                        <a href="/viasathusy">Dịch vụ visa Thụy Sĩ</a>
                      </td>
                    </tr>
                  </tbody>
                </table>
              </div>
            </div>
            <li><a class="transition hover:text-blue-500" href="/timtruong">TÌM TRƯỜNG</a></li>
            <li><a class="transition hover:text-blue-500" href="/tintuc">TIN TỨC</a></li>
            <li><a class="transition hover:text-blue-500" href="/chat">CHAT</a></li>

            @* <li>
            <form class="flex items-center">
            <input type="text" placeholder="Tìm kiếm..."
            class="rounded-l border px-2 py-1 focus:outline-none focus:ring focus:ring-blue-300" />
            <button class="rounded-r bg-blue-500 px-3 py-1 text-white transition hover:bg-blue-600">Tìm</button>
            </form>
            </li> *@
          </ul>
        </div>
        <div class="flex mr-10 items-center">
          @* //tai khoan *@
          <div class="header-hotline  bg-white">
            <div class="container mx-auto flex items-center justify-end gap-3">
              <!-- Phần icon và dropdown menu -->
              @if (isAuthenticated)
              {
                <div class="relative">
                  <button id="iconPersonButton" class="text-black focus:outline-none">
                    <img src="https://cdn-icons-png.flaticon.com/128/1077/1077063.png" alt="User Icon"
                      class="w-6 h-6 mb-px	">
                  </button>

                  <!-- Dropdown menu -->
                  <div id="iconDropdownMenutk" class="hidden absolute right-0 border rounded shadow-md mt-2 w-48">
                    <!-- Tài khoản -->
                    <div class="px-4 py-2 text-black font-bold">
                      <a href="/pageacc" class="text-black hover:bg-gray-100">Tài khoản</a>
                    </div>
                    <ul>
                      @if (User.IsInRole("Admin"))
                      {
                        <li><a href="/admin" class="block px-4 py-2 text-black hover:bg-gray-100">Admin</a></li>
                      }
                      <li>
                        <a href="@Url.Action("Logout", "Account")"
                          class="block px-4 py-2  font-bold text-black hover:bg-gray-100" onclick="confirmLogout(event)">
                          Đăng xuất
                        </a>
                      </li>
                    </ul>
                  </div>
                </div>
              }
              else
              {
                <div class="relative  ">
                  <button id="iconPersonButton" class="text-black focus:outline-none">
                    <img src="https://cdn-icons-png.flaticon.com/128/1077/1077063.png" alt="User Icon" class="w-6 h-6">
                  </button>


                  <div id="iconDropdownMenutk"
                    class="hidden absolute right-0 bg-white border rounded shadow-md mt-2 w-48">
                    <ul>
                      <li><a href="/login" class="block px-4 py-2 text-black font-bold hover:bg-gray-100">Đăng nhập</a>
                      </li>
                      <li><a href="/register" class="block px-4 py-2 text-black font-bold hover:bg-gray-100">Đăng ký</a>
                      </li>
                    </ul>
                  </div>
                </div>
              }
            </div>
          </div>
          <!-- Phần chuông thông báo -->
          <div class="list-none mb-2 relative">
            <a href="/notification" class="relative" onclick="toggleNotificationDropdown(event)">
              <img src="https://cdn-icons-png.flaticon.com/128/1827/1827422.png" class="w-6" alt="Notification Bell">
              <!-- Thẻ hiển thị số thông báo -->
              <span id="notificationCount"
                class="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full px-1">0</span>
            </a>

            <!-- Dropdown hiển thị thông báo -->
            <div id="notificationDropdown" class="hidden absolute right-0 bg-white border rounded shadow-md mt-2 w-80">
              <div class="py-2 px-4 border-b">
                <h3 class="font-semibold text-lg">Thông báo</h3>
              </div>
              <ul id="notificationList" class="max-h-60 overflow-y-auto">
                <!-- Các thông báo sẽ được thêm vào đây bằng JavaScript -->
              </ul>
              <div class="py-2 px-4">
                <a href="/notification" class="text-blue-600 hover:text-blue-800">Xem tất cả</a>
              </div>
            </div>
          </div>

        </div>
      </div>

    </div>
  </div>

  <!-- Menu dọc cho màn hình nhỏ -->
  <div id="small-menu" class="bg-white lg:hidden hidden p-4">
    <ul class="flex flex-col text-lg font-medium">
      <li><a class="transition hover:text-blue-500 p-2 border-b border-gray-300" href="/home">TRANG CHỦ</a></li>
      <li><a class="transition hover:text-blue-500 p-2 border-b border-gray-300" href="/vechungtoi">VỀ CHÚNG TÔI</a>
      </li>

      <!-- Mục Du Học -->
      <li class="border-b border-gray-300">
        <a class="transition hover:text-blue-500 p-2" href="/duhoc">DU HỌC</a>
        <ul class="flex flex-col pl-4">
          <li><a class="hover:text-blue-500" href="/my">Du học Mỹ</a></li>
          <li><a class="hover:text-blue-500" href="/uc">Du học Úc</a></li>
          <li><a class="hover:text-blue-500" href="/thuysy">Du học Thụy Sĩ</a></li>
          <li><a class="hover:text-blue-500" href="/singapore">Du học Singapore</a></li>
        </ul>
      </li>

      <!-- Mục Dịch Vụ -->
      <li class="border-b border-gray-300">
        <a class="transition hover:text-blue-500 p-2" href="/dichvu">DỊCH VỤ</a>
        <ul class="flex flex-col pl-4">
          <li><a class="hover:text-blue-500" href="/visamy">Dịch vụ visa Mỹ</a></li>
          <li><a class="hover:text-blue-500" href="/visauc">Dịch vụ visa Úc</a></li>
          <li><a class="hover:text-blue-500" href="/visasingapore">Dịch vụ visa Singapore</a></li>
          <li><a class="hover:text-blue-500" href="/viasathusy">Dịch vụ visa Thụy Sĩ</a></li>
        </ul>
      </li>

      <li><a class="transition hover:text-blue-500 p-2 border-b border-gray-300" href="/timtruong">TÌM TRƯỜNG</a></li>
      <li><a class="transition hover:text-blue-500 p-2 border-b border-gray-300" href="/tintuc">TIN TỨC</a></li>
      <li><a class="transition hover:text-blue-500 p-2 border-b border-gray-300" href="lienhe">LIÊN HỆ</a></li>
      <li><a class="transition hover:text-blue-500 p-2 border-b border-gray-300" href="/chat">CHAT</a></li>
      <li>
        <form class="flex items-center p-2">
          <input type="text" placeholder="Tìm kiếm..."
            class="border rounded-l px-2 py-1 focus:outline-none focus:ring focus:ring-blue-300">
          <button class="bg-blue-500 text-white px-3 py-1 rounded-r hover:bg-blue-600 transition">Tìm</button>
        </form>
      </li>
    </ul>
  </div>
  </div>

  <script>
    // JavaScript cho phần menu
    const duhocLink = document.getElementById('duhoc-link');
    const duhocList = document.getElementById('duhoc-list');
    const tuvanLink = document.getElementById('tuvan-link');
    const tuvanList = document.getElementById('tuvan-list');

    const menuToggle = document.getElementById('menu-toggle');
    const smallMenu = document.getElementById('small-menu');
    const duhocLinkSmall = document.getElementById('duhoc-link-small');
    const duhocListSmall = document.getElementById('duhoc-list-small');
    const tuvanLinkSmall = document.getElementById('tuvan-link-small');
    const tuvanListSmall = document.getElementById('tuvan-list-small');

    duhocLink.addEventListener('mouseenter', () => {
      duhocList.classList.remove('hidden');
    });

    duhocLink.addEventListener('mouseleave', () => {
      setTimeout(() => {
        if (!duhocList.matches(':hover')) {
          duhocList.classList.add('hidden');
        }
      }, 200);
    });

    duhocList.addEventListener('mouseenter', () => {
      duhocList.classList.remove('hidden');
    });

    duhocList.addEventListener('mouseleave', () => {
      duhocList.classList.add('hidden');
    });

    tuvanLink.addEventListener('mouseenter', () => {
      tuvanList.classList.remove('hidden');
    });

    tuvanLink.addEventListener('mouseleave', () => {
      setTimeout(() => {
        if (!tuvanList.matches(':hover')) {
          tuvanList.classList.add('hidden');
        }
      }, 200);
    });

    tuvanList.addEventListener('mouseenter', () => {
      tuvanList.classList.remove('hidden');
    });

    tuvanList.addEventListener('mouseleave', () => {
      tuvanList.classList.add('hidden');
    });

    // Xử lý nút hamburger
    menuToggle.addEventListener('click', () => {
      smallMenu.classList.toggle('hidden');
    });

    duhocLinkSmall.addEventListener('mouseenter', () => {
      duhocListSmall.classList.remove('hidden');
    });

    duhocLinkSmall.addEventListener('mouseleave', () => {
      setTimeout(() => {
        if (!duhocListSmall.matches(':hover')) {
          duhocListSmall.classList.add('hidden');
        }
      }, 200);
    });

    duhocListSmall.addEventListener('mouseenter', () => {
      duhocListSmall.classList.remove('hidden');
    });

    duhocListSmall.addEventListener('mouseleave', () => {
      duhocListSmall.classList.add('hidden');
    });

    tuvanLinkSmall.addEventListener('mouseenter', () => {
      tuvanListSmall.classList.remove('hidden');
    });

    tuvanLinkSmall.addEventListener('mouseleave', () => {
      setTimeout(() => {
        if (!tuvanListSmall.matches(':hover')) {
          tuvanListSmall.classList.add('hidden');
        }
      }, 200);
    });

    tuvanListSmall.addEventListener('mouseenter', () => {
      tuvanListSmall.classList.remove('hidden');
    });

    tuvanListSmall.addEventListener('mouseleave', () => {
      tuvanListSmall.classList.add('hidden');
    });


    function confirmLogout(event) {
      if (!confirm("Bạn có chắc muốn đăng xuất không?")) {
        event.preventDefault(); // Ngăn chặn hành vi mặc định của liên kết
      }
    }


    document.getElementById('dropdownButton').addEventListener('click', function () {
      var menu = document.getElementById('dropdownMenu');
      menu.classList.toggle('hidden');
    });

    // Hide the dropdown menu if clicked outside
    window.addEventListener('click', function (e) {
      if (!document.getElementById('iconDropdownMenutk').contains(e.target)) {
        document.getElementById('dropdownMenu').classList.add('hidden');
      }
    });
  </script>

  <script>
    document.getElementById('iconDropdownMenutk').addEventListener('click', function () {
      var dropdownMenu = document.getElementById('dropdownMenu');

      // Toggle ẩn hiện menu
      if (dropdownMenu.classList.contains('hidden')) {
        dropdownMenu.classList.remove('hidden');
      } else {
        dropdownMenu.classList.add('hidden');
      }
    });

    // Ẩn menu khi click ra ngoài
    document.addEventListener('click', function (event) {
      var iconDropdownMenutk = document.getElementById('iconDropdownMenutk');
      var dropdownMenu = document.getElementById('dropdownMenu');

      if (!iconDropdownMenutk.contains(event.target) && !dropdownMenu.contains(event.target)) {
        dropdownMenu.classList.add('hidden');
      }
    });
    function toggleMenu() {
      const menu = document.getElementById("menu");
      menu.classList.toggle("hidden");
    }
  </script>
  <script>
    // Bắt sự kiện khi nhấp vào nút icon person
    document.getElementById('iconPersonButton').addEventListener('click', function (event) {
      event.stopPropagation(); // Ngăn chặn sự kiện click lan ra ngoài
      var dropdownMenu = document.getElementById('iconDropdownMenutk');
      dropdownMenu.classList.toggle('hidden'); // Hiện/ẩn menu
    });

    // Ẩn menu nếu nhấp ra ngoài
    document.addEventListener('click', function (event) {
      var iconPersonButton = document.getElementById('iconPersonButton');
      var dropdownMenu = document.getElementById('iconDropdownMenutk');

      // Kiểm tra nếu nhấp ngoài khu vực nút icon hoặc menu
      if (!iconPersonButton.contains(event.target) && !dropdownMenu.contains(event.target)) {
        dropdownMenu.classList.add('hidden'); // Ẩn menu
      }
    });

    // Hàm xác nhận đăng xuất
    function confirmLogout(event) {
      if (!confirm("Bạn có chắc muốn đăng xuất không?")) {
        event.preventDefault(); // Ngăn không cho liên kết hoạt động nếu chọn "Không"
      }
    }




    // Hàm để lấy thông báo từ server
    async function fetchNotifications() {
      try {
        const response = await fetch('/api/notifications');  // Đảm bảo API này trả về danh sách thông báo
        if (response.ok) {
          const notifications = await response.json();
          renderNotifications(notifications);
        } else {
          console.error('Không thể tải thông báo từ server');
        }
      } catch (error) {
        console.error('Lỗi khi gọi API lấy thông báo:', error);
      }
    }

    // Hàm để hiển thị thông báo trong dropdown
    function renderNotifications(notifications) {
      const notificationList = document.getElementById('notificationList');
      notificationList.innerHTML = '';  // Xóa danh sách cũ

      notifications.forEach(notification => {
        const li = document.createElement('li');
        li.classList.add('cursor-pointer', 'p-4', 'border-b', 'hover:bg-gray-100', 'flex', 'items-center', 'justify-between');

        // Thêm tiêu đề và nội dung
        const content = document.createElement('div');
        content.classList.add('flex', 'flex-col', 'space-y-1');
        const title = document.createElement('span');
        title.classList.add('font-semibold', 'text-gray-800');
        title.textContent = notification.title;

        const message = document.createElement('span');
        message.classList.add('text-sm', 'text-gray-600');
        message.textContent = notification.message;

        content.appendChild(title);
        content.appendChild(message);

        // Hiển thị trạng thái đọc
        const readStatus = document.createElement('span');
        readStatus.classList.add(notification.isRead ? 'text-green-500' : 'text-red-500');
        readStatus.textContent = notification.isRead ? 'Đã đọc' : 'Chưa đọc';

        li.appendChild(content);
        li.appendChild(readStatus);

        li.addEventListener('click', () => {
          markAsRead(notification.id);
          li.classList.add('text-gray-400');  // Đánh dấu thông báo đã đọc
          readStatus.textContent = 'Đã đọc';
          readStatus.classList.add('text-green-500');
        });

        notificationList.appendChild(li);
      });

      updateNotificationCount(notifications);
    }

    // Hàm để cập nhật số lượng thông báo chưa đọc
    function updateNotificationCount(notifications) {
      const unreadNotifications = notifications.filter(n => !n.isRead);
      const notificationCount = document.getElementById('notificationCount');
      notificationCount.textContent = unreadNotifications.length;
      notificationCount.style.display = unreadNotifications.length > 0 ? 'inline-block' : 'none';
    }

    // Hàm đánh dấu thông báo là đã đọc (cập nhật trạng thái trong database)
    async function markAsRead(notificationId) {
      try {
        const response = await fetch(`/api/notifications/${notificationId}`, {
          method: 'PUT',
          headers: {
            'Content-Type': 'application/json'
          }
        });
        if (response.ok) {
          console.log(`Thông báo ${notificationId} đã được đánh dấu là đã đọc.`);
        } else {
          console.error('Không thể đánh dấu thông báo là đã đọc');
        }
      } catch (error) {
        console.error('Lỗi khi đánh dấu thông báo là đã đọc:', error);
      }
    }

    // Lắng nghe sự kiện khi dropdown được mở
    function toggleNotificationDropdown(event) {
      event.preventDefault();
      const dropdown = document.getElementById('notificationDropdown');
      dropdown.classList.toggle('hidden');
      fetchNotifications();  // Lấy và render thông báo khi dropdown mở
    }

    // Khởi tạo kết nối SignalR
    const connection = new signalR.HubConnectionBuilder()
      .withUrl("/chathub")  // URL đến SignalR Hub
      .build();

    // Lắng nghe sự kiện nhận thông báo
    connection.on("ReceiveNotification", function (notification) {
      console.log('Nhận thông báo mới:', notification);
      // Cập nhật giao diện với thông báo mới
      const notificationList = document.getElementById('notificationList');
      const li = document.createElement('li');
      li.classList.add('cursor-pointer', 'p-4', 'border-b', 'hover:bg-gray-100', 'flex', 'items-center', 'justify-between');
      const content = document.createElement('div');
      content.classList.add('flex', 'flex-col', 'space-y-1');
      const title = document.createElement('span');
      title.classList.add('font-semibold', 'text-gray-800');
      title.textContent = notification.title;

      const message = document.createElement('span');
      message.classList.add('text-sm', 'text-gray-600');
      message.textContent = notification.message;

      content.appendChild(title);
      content.appendChild(message);

      const readStatus = document.createElement('span');
      readStatus.classList.add(notification.isRead ? 'text-green-500' : 'text-red-500');
      readStatus.textContent = notification.isRead ? 'Đã đọc' : 'Chưa đọc';

      li.appendChild(content);
      li.appendChild(readStatus);

      notificationList.appendChild(li);
      updateNotificationCount();
    });

    // Khởi động SignalR
    connection.start().catch(function (err) {
      return console.error('Lỗi khi kết nối SignalR: ', err.toString());
    });

    // Lấy thông báo khi trang được tải
    document.addEventListener('DOMContentLoaded', function () {
      fetchNotifications();  // Lấy danh sách thông báo từ server khi tải trang
    });


  </script>

</body>

</html>
