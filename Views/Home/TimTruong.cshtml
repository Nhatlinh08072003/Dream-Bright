@model List<Dream_Bridge.Models.Main.School>

<div class="mx-4 md:mx-14">
    <div class="container mx-auto p-4">
        <form class="flex flex-col gap-4" onsubmit="event.preventDefault(); searchSchools();">
            <div class="flex flex-col gap-4 md:flex-row">
                <div class="flex-1">
                    <h3 class="mb-2 font-semibold">Quốc gia</h3>
                    <select id="country" class="w-full rounded-md border border-gray-300 px-4 py-2">
                        <option value="" disabled selected> -- Chọn quốc gia --</option>
                    </select>
                </div>

                <div class="flex-1">
                    <h3 class="mb-2 font-semibold">Tỉnh bang/Thành phố</h3>
                    <select id="city" class="w-full rounded-md border border-gray-300 px-4 py-2">
                        <option value="" disabled selected> -- Chọn tỉnh/thành phố --</option>
                    </select>
                </div>

                <div class="flex-1">
                    <h3 class="mb-2 font-semibold">Bậc học</h3>
                    <select id="educationLevel" class="w-full rounded-md border border-gray-300 px-4 py-2">
                        <option value="" disabled selected> -- Chọn bậc học --</option>
                    </select>
                </div>

                <div class="flex-1">
                    <h3 class="mb-2 font-semibold">Học phí tối đa</h3>
                    <input id="maxTuition" type="number" class="w-full rounded-md border border-gray-300 px-4 py-2"
                        max="@ViewBag.MaxTuition" />
                </div>

                <div class="flex self-end md:w-auto">
                    <button id="search-btn" type="button"
                        class="w-full rounded bg-blue-500 px-4 py-2 font-bold text-white hover:bg-blue-700 md:w-auto md:px-6">
                        Tìm trường
                    </button>
                </div>
            </div>
        </form>
    </div>

    <div class="container mx-auto p-4">
        <h2 class="mb-4 text-2xl font-semibold">DANH SÁCH TRƯỜNG</h2>
        <div id="school-cards" class="-mx-2 flex flex-wrap">
            @if (Model != null && Model.Count > 0)
            {
                foreach (var school in Model)
                {
                    <div class="school-card mb-4 w-full px-2 sm:w-1/2">
                        <div
                            class="flex h-full flex-row rounded-lg bg-white p-4 shadow-md hover:shadow-lg transition-shadow duration-200">
                            <img src="@school.ImageSchool" alt="@school.TitleSchool"
                                class="h-32 w-32 object-cover rounded-md flex-shrink-0" loading="lazy" />
                            <div class="flex flex-1 flex-col justify-between ml-4">
                                <a href="@Url.Action("ChiTietTruong", "DichVu", new { id = school.IdSchool })"
                                    class="cursor-pointer">
                                    <ul class="list-inside list-disc text-sm text-gray-600">
                                        <li>Quốc gia: <span class="text-blue-600">@school.Nation</span></li>
                                        <li>Tỉnh bang/ Thành phố: <span class="text-blue-600">@school.StateCity</span></li>
                                        <li>Bậc học: <span class="text-blue-600">@school.Level</span></li>
                                        <li>Học phí trung bình: <span
                                                class="text-blue-600">@school.AverageTuition.ToString("C")</span></li>
                                    </ul>
                                </a>
                            </div>
                        </div>
                    </div>
                }
            }
            else
            {
                <p class="text-gray-600">Không có trường nào để hiển thị.</p>
            }
        </div>

        <div class="mt-4 text-center">
            <button id="view-more-btn" class="rounded bg-blue-500 px-4 py-2 text-white">Xem thêm</button>
        </div>
    </div>

    <div class="container mx-auto p-4">
        <h2 class="mb-4 text-2xl font-semibold">Demo Builder Pattern</h2>
        <div class="text-center">
            <button id="demo-builder-btn" class="rounded bg-green-500 px-4 py-2 text-white hover:bg-green-700">
                Xem Demo Builder Pattern
            </button>
        </div>
        <div id="builder-demo-container" class="mt-4 hidden">
            <h3 class="text-xl font-semibold">Danh sách trường từ Builder Pattern</h3>
            <table class="w-full mt-4 border-collapse border border-gray-300">
                <thead>
                    <tr class="bg-gray-100">
                        <th class="border border-gray-300 px-4 py-2">Tên trường</th>
                        <th class="border border-gray-300 px-4 py-2">Quốc gia</th>
                        <th class="border border-gray-300 px-4 py-2">Tỉnh/Thành phố</th>
                        <th class="border border-gray-300 px-4 py-2">Bậc học</th>
                        <th class="border border-gray-300 px-4 py-2">Học phí</th>
                    </tr>
                </thead>
                <tbody id="builder-demo-table"></tbody>
            </table>
        </div>
    </div>
</div>

<script>
    document.addEventListener("DOMContentLoaded", () => {
        loadNations();
        loadMaxTuition();
        setupEventListeners();
    });

    function setupEventListeners() {
        document.getElementById('country').addEventListener('change', loadCitiesAndEducationLevels);
        document.getElementById('city').addEventListener('change', checkFormValidity);
        document.getElementById('educationLevel').addEventListener('change', checkFormValidity);
        document.getElementById('maxTuition').addEventListener('input', checkFormValidity);
        document.getElementById('search-btn').addEventListener('click', searchSchools);
        document.getElementById('demo-builder-btn').addEventListener('click', demoBuilderPattern);
    }

    async function loadNations() {
        try {
            const response = await fetch('/api/nations');
            const nations = await response.json();
            populateDropdown('country', nations);
        } catch (error) {
            console.error('Error fetching nations:', error);
        }
    }

    async function loadMaxTuition() {
        try {
            const response = await fetch('/api/max-tuition');
            const maxTuition = await response.json();
            document.getElementById('maxTuition').max = maxTuition;
        } catch (error) {
            console.error('Error fetching max tuition:', error);
        }
    }

    async function loadCitiesAndEducationLevels() {
        const country = document.getElementById("country").value;
        if (country) {
            try {
                const [cities, educationLevels] = await Promise.all([
                    fetch(`/api/cities/${country}`).then(res => res.json()),
                    fetch(`/api/education-levels/${country}`).then(res => res.json())
                ]);
                populateDropdown('city', cities);
                populateDropdown('educationLevel', educationLevels);
            } catch (error) {
                console.error('Error fetching data:', error);
            }
        }
        checkFormValidity();
    }

    function populateDropdown(id, items) {
        const select = document.getElementById(id);
        select.innerHTML = `<option value="" disabled selected>-- Chọn --</option>`;
        items.forEach(item => {
            const option = document.createElement("option");
            option.value = item;
            option.textContent = item;
            select.appendChild(option);
        });
    }

    function checkFormValidity() {
        const country = document.getElementById("country").value;
        const city = document.getElementById("city").value;
        const educationLevel = document.getElementById("educationLevel").value;
        const maxTuition = document.getElementById("maxTuition").value;
        document.getElementById("search-btn").disabled = !(country && city && educationLevel && maxTuition);
    }

    async function searchSchools() {
        const country = document.getElementById("country").value;
        const city = document.getElementById("city").value;
        const educationLevel = document.getElementById("educationLevel").value;
        const maxTuition = document.getElementById("maxTuition").value;

        try {
            const response = await fetch(`/api/schools`, {
                method: "POST",
                headers: {
                    "Content-Type": "application/json"
                },
                body: JSON.stringify({
                    country,
                    city,
                    educationLevel,
                    maxTuition: parseFloat(maxTuition) // Đảm bảo giá trị là số
                })
            });

            if (response.ok) {
                const schools = await response.json();
                renderSchoolCards(schools);
            } else {
                console.error("Failed to fetch schools:", response.statusText);
            }
        } catch (error) {
            console.error("Error:", error);
        }
    }

    async function demoBuilderPattern() {
        try {
            const response = await fetch(`/Home/DemoBuilderPattern`);
            if (response.ok) {
                const schools = await response.json();
                const tableBody = document.getElementById("builder-demo-table");
                tableBody.innerHTML = schools.map(school => `
                    <tr>
                        <td class="border border-gray-300 px-4 py-2">${school.titleSchool}</td>
                        <td class="border border-gray-300 px-4 py-2">${school.nation}</td>
                        <td class="border border-gray-300 px-4 py-2">${school.stateCity}</td>
                        <td class="border border-gray-300 px-4 py-2">${school.level}</td>
                        <td class="border border-gray-300 px-4 py-2">${school.averageTuition.toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</td>
                    </tr>
                `).join('');
                document.getElementById("builder-demo-container").classList.remove("hidden");
            } else {
                console.error("Failed to fetch demo schools:", response.statusText);
            }
        } catch (error) {
            console.error("Error:", error);
        }
    }

    function renderSchoolCards(schools) {
        const schoolContainer = document.getElementById("school-cards");
        schoolContainer.innerHTML = schools.length
            ? schools.map(school => `
            <div class="school-card mb-4 w-full px-2 sm:w-1/2">
                <div class="flex h-full flex-row rounded-lg bg-white p-4 shadow-md hover:shadow-lg transition-shadow duration-200">
                    <img src="${school.imageSchool}" alt="${school.titleSchool}" class="h-32 w-32 object-cover rounded-md flex-shrink-0" loading="lazy" />
                    <div class="flex flex-1 flex-col justify-between ml-4">
                        <a href="/DichVu/ChiTietTruong/${school.idSchool}" class="cursor-pointer">
                            <ul class="list-inside list-disc text-sm text-gray-600">
                                <li>Quốc gia: <span class="text-blue-600">${school.nation}</span></li>
                                <li>Tỉnh bang/ Thành phố: <span class="text-blue-600">${school.stateCity}</span></li>
                                <li>Bậc học: <span class="text-blue-600">${school.level}</span></li>
                                <li>Học phí trung bình: <span class="text-blue-600">${parseFloat(school.averageTuition).toLocaleString('vi-VN', { style: 'currency', currency: 'VND' })}</span></li>
                            </ul>
                        </a>
                    </div>
                </div>
            </div>`).join('')
            : `<p class="text-gray-600">Không có trường nào để hiển thị.</p>`;
    }
</script>
